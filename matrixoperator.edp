mesh Th = square(2,1);
fespace Vh(Th,P1);
Vh f,g;
f = x*y;
g = sin(pi*x);
Vh<complex> ff,gg;		//a complex valued finite element function
ff= x*(y+1i);
gg = exp(pi*x*1i);

varf mat(u,v) =
int2d(Th)(1*dx(u)*dx(v)+2*dx(u)*dy(v)+3*dy(u)*dx(v)+4*dy(u)*dy(v))
+ on(1,2,3,4,u=1);

varf mati(u,v) =
int2d(Th)(1*dx(u)*dx(v)+2i*dx(u)*dy(v)+3*dy(u)*dx(v)+4*dy(u)*dy(v))
+ on(1,2,3,4,u=1);

matrix A = mat(Vh,Vh); matrix<complex> AA = mati(Vh,Vh);
matrix<complex> K=mati(Vh,Vh);

Vh m0; m0[] = A*f[];
Vh m01; m01[] = A'*f[];
Vh m1; m1[] = f[].*g[];
Vh m2; m2[] = f[]./g[];



cout << "f = " << f[] << endl;
cout << "g = " << g[] << endl;
cout << "A = " << A << endl;
cout << "m0 = " << m0[] << endl;
cout << "m01 = " << m01[] << endl;
cout << "m1 = "<< m1[] << endl;
cout << "m2 = "<< m2[] << endl;
cout << "dot Product = "<< f[]'*g[] << endl;
cout << "hermitien Product = "<< ff[]'*gg[] << endl;
cout << "outer Product = "<< (K=ff[]*gg[]') << endl;
cout << "hermitien outer Product = "<< (AA=ff[]*gg[]') << endl;

real[int] diagofA(A.n);
diagofA = A.diag; 		//get the diagonal of the matrix
A.diag = diagofA ;		//set the diagonal of the matrix

int[int] I(1),J(1); real[int] C(1);
[I,J,C]=A;
						//get of the sparse term of the matrix A (the array are resized)
cout << " I= " << I << endl;
cout << " J= " << J << endl;
cout << " C= " << C << endl;
A=[I,J,C];
						//set a new matrix
matrix D=[diagofA] ;
						//set a diagonal matrix D from the array diagofA.
cout << " D = " << D << endl;
